{
  "name": "expectacle",
  "version": "1.3.0",
  "description": "A simple, sanely-syntaxed expectation library.",
  "main": "expectacle.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test"
  },
  "repository": {
    "type": "git",
    "url": "github.com:keeto/expectacle.git"
  },
  "keywords": [
    "expect",
    "expectations",
    "testing"
  ],
  "author": {
    "name": "Mark Obcena"
  },
  "license": "MIT-Style",
  "bugs": {
    "url": "https://github.com/keeto/expectacle/issues"
  },
  "devDependencies": {
    "mocha": "~1.15.1"
  },
  "readme": "Expectacle\n==========\n\nExpectacle is a simple expectation library with a sane syntax.\n\n\nInstallation\n------------\n\nExpectacle can be used in the browser, on NodeJS and on any CommonJS environment that supports Modules/1.1.\n\n### Browser\n\nDownload `expectacle.js` and include it with a script tag:\n\n```html\n<script type=\"text/javascript\" src=\"/path/to/expectacle.js\"></script>\n<script type=\"text/javascript\">\n// window.expect();\n</script>\n```\n\n### NodeJS\n\nExpectacle is available on NPM:\n\n```sh\n$ npm install expectacle\n```\n\nYou can then require it in your tests:\n\n```js\nvar expect = require('expectacle');\n```\n\n### CommonJS\n\nDownload `expectacle.js` and use `require`:\n\n```js\nvar expect = require('./path/to/expectacle').expect;\n```\n\n\nUsage\n-----\n\nExpectacle has one main function called `expect`, that is used to create a new *expectation*. It takes in one argument, the *value* of the expectation, which could be of any JavaScript type.\n\n### The Basics\n\n```js\nexpect(1);\n```\n\nAn expectation can then be tested using *matchers*. A matcher is a function that performs checks on the value of the expectation using zero or one arguments. It then returns either `true` or `false` depending on whether the value passes the check. If a matcher returns `false`, the expectation fails and an error is thrown.\n\n```js\nexpect(1).toBe(1); // passes, no error.\nexpect(2).toBe(1); // fails, throws an ExpectationError.\n```\n\nAll expectations have a corresponding *reversed expectation* that can be accessed using the `not` member. This expectation has the same matchers as a regular expectations, but perform reversed tests with the matchers: the matcher returns `false` for success and `true` for failures.\n\n```js\nexpect(1).not.toBe(2); // passes, no error.\nexpect(1).not.toBe(1); // fails, throws an ExpectationError.\n```\n\n### The Matchers\n\nExpectacle comes with the following matchers by default:\n\n#### `toBe(value)`\n\nThe *identity matcher* checks whether the expectation's value is identical to the passed value. It uses the `===` operator internally, and therefore disregards any type casting rules.\n\n#### `toEqual(value)`\n\nThe *equality matcher* checks whether the expectation's value is equal to the passed value. It uses the `==` operator internally, and therefore coerces types.\n\n#### `toBeLike(value)`\n\nChecks whether the expected value is *similar* to the passed value. It uses a deep-comparison of keys and properties for objects.\n\n#### `toThrow([error])`\n\nChecks whether a function expected value throws an error.\n\nThis matcher can be used without passing the `error` argument, in which case the matcher only checks if the expected value throws.\n\nOptionally, one could pass an `error` argument that could either be a string, a regular expression or a constructor function:\n\n- If the `error` argument is a string, the `error` argument is compared against the `message` of the expected value's thrown error.\n- If the `error` argument is a regular expression, the `message` of the expected value's thrown error is tested against the `error` argument.\n- If the `error` argument is a constructor function, the `name` property of the expected value's thrown error is compared against the `name` value of the constructor function's `prototype`.\n\n#### `toMatch(expression)`\n\nChecks whether the expected value's string representation matches the passed `expression` argument.\n\n#### `toHaveLength(length)`\n\nChecks whether the expected value is of the passed `length`.\n\nThis matcher uses the `length` property if it is available (e.g., in strings, arrays, arguments and any object that has a `length` property). If the expected value is an object *without* a length property, this matcher check the number of keys (i.e., member/property names).\n\n#### `toBeEmpty()`\n\nChecks whether the expected value is empty.\n\nThis matcher uses the `length` property if it is available (e.g., in strings, arrays, arguments and any object that has a `length` property). If the expected value is an object *without* a length property, this matcher check the number of keys (i.e., member/property names).\n\n#### `toHaveMember(name)`\n\nChecks whether the expected value has a member (i.e., property or method) with a name corresponding to the passed argument.\n\n#### `toHaveOwnMember(name)`\n\nMatches like `toHaveMember`, but disregards any inherited members.\n\n#### `toHaveProperty(name)`\n\nChecks whether the expected value has a property (i.e., non-function member) with a name corresponding to the passed argument.\n\n#### `toHaveOwnProperty(name)`\n\nMatches like `toHaveProperty`, but disregards any inherited properties.\n\n#### `toHaveMethod(name)`\n\nChecks whether the expected value has a method (i.e., function member) with a name corresponding to the passed argument.\n\n#### `toHaveOwnMember(name)`\n\nMatches like `toHaveMember`, but disregards any inherited methods.\n\n#### `toBeAnInstanceOf(constructor)`\n\nChecks whether the expectation's value is an instance of the the passed `constructor` argument. Will throw an `ExpectationError` if the passed `constructor` argument is not a function.\n\n#### `toBeOfType(typeString)`\n\nChecks whether the expectation's value has the type corresponding to the passed `typeString`.\n\nThis function is implemented using `Object.prototype.toString` to get the type's string representation. The following typeStrings are pre-populated: `'arguments'`, `'array'`, `'boolean'`, `'date'`, `'function'`,`'null'`, `'number'`, `'object'`, `'regexp'`, `'string'`, `'undefined'`.\n\n#### `toBeBoolean()`\n\nChecks whether the expected value is a boolean.\n\n#### `toBeArray()`\n\nChecks whether the expected value is an array.\n\n#### `toBeFunction()`\n\nChecks whether the expected value is a function.\n\n#### `toBeNumber()`\n\nChecks whether the expected value is a number.\n\n#### `toBeObject()`\n\nChecks whether the expected value is an object (but not an array).\n\n#### `toBeString()`\n\nChecks whether the expected value is a string.\n\n#### `toBeNull()`\n\nChecks whether the expected value is `null`.\n\n#### `toBeUndefined()`\n\nChecks whether the expected value is `undefined`.\n\n#### `toBeNaN()`\n\nChecks whether the expected value is `NaN`.\n\n#### `toBeTrue()`\n\nChecks whether the expected value is `true`.\n\n#### `toBeFalse()`\n\nChecks whether the expected value is `false`.\n\n#### `toBeTruthy()`\n\nChecks whether the expected value is truthy (i.e., coerces as a boolean `true` value).\n\n#### `toBeFalsy()`\n\nChecks whether the expected value is falsy (i.e., coerces as a boolean `false` value).\n\n\nAbout\n-----\n\nCopyright 2014, Mark \"Keeto\" Obcena. Released under an MIT-Style License.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/keeto/expectacle",
  "_id": "expectacle@1.3.0",
  "_shasum": "6d0c61030bc93ccbfcbc91836b15c29d3d727f75",
  "_from": "expectacle@*",
  "_resolved": "https://registry.npmjs.org/expectacle/-/expectacle-1.3.0.tgz"
}
